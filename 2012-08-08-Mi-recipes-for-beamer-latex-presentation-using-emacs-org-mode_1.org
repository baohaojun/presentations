Recipes for presentations with beamer latex using emacs org-mode

#+startup: beamer
#+LaTeX_CLASS: beamer
#+BEAMER_FRAME_LEVEL: 2

* Introduction

** Usage

*** (configure your emacs, see Basic Configuration at the end)
*** C-f <file which ends in .org>
*** Insert heading:
: Hello World
: 
: #+LaTeX_CLASS: beamer
: #+BEAMER_FRAME_LEVEL: 2
: 
: * Hello
: ** Hello GNU
: Nice to see you!
*** M-x org-export-as-pdf

/done: Your first org-beamer presentation./

** org-mode + beamer =  love

*** Code                                                              :BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.7
    :END:

: Recipes
: #+LaTeX_CLASS: beamer
: #+BEAMER_FRAME_LEVEL: 2
: * Introduction
: ** org-mode + beamer =  love
: *** Code :BMCOL:
:     :PROPERTIES:
:     :BEAMER_col: 0.7
:     :END:
: <example block>
: *** Simple block  :BMCOL:B_block:
:     :PROPERTIES:
:     :BEAMER_col: 0.3
:     :BEAMER_env: block
:     :END:
: it's that easy!

*** Simple block                                              :BMCOL:B_block:
    :PROPERTIES:
    :BEAMER_col: 0.3
    :BEAMER_env: block
    :END:
it's that easy!

** Two columns - in commands

*** Commands                                                  :BMCOL:B_block:
    :PROPERTIES:
    :BEAMER_col: 0.7
    :BEAMER_env: block
    :END:
: ** Two columns - in commands
: *** Commands
: C-c C-b | 0.7
: C-c C-b b
: C-n
: <eTAB (write example) C-n C-n
: *** Result
: C-c C-b | 0.3
: C-c C-b b
: even easier - and faster!

*** Result                                                    :BMCOL:B_block:
    :PROPERTIES:
    :BEAMER_col: 0.3
    :BEAMER_env: block
    :END:
even easier - and faster!

* Recipes

** Four blocks - code

#+begin_example
*** Column 1 :B_ignoreheading:BMCOL:
    :PROPERTIES:
    :BEAMER_env: ignoreheading
    :BEAMER_col: 0.5
    :END:

*** One
*** Three                                                           

*** Column 2 :BMCOL:B_ignoreheading:
    :PROPERTIES:
    :BEAMER_col: 0.5
    :BEAMER_env: ignoreheading
    :END:

*** Two
*** Four
#+end_example

** Four blocks - result
*** Column 1 :B_ignoreheading:BMCOL:
    :PROPERTIES:
    :BEAMER_env: ignoreheading
    :BEAMER_col: 0.5
    :END:

*** One
*** Three                                                           

*** Column 2 :BMCOL:B_ignoreheading:
    :PROPERTIES:
    :BEAMER_col: 0.5
    :BEAMER_env: ignoreheading
    :END:

*** Two
*** Four

** Four nice blocks - commands

#+begin_example
*** 
C-c C-b | 0.5 # column
C-c C-b i # ignore heading
*** One 
C-c C-b b # block
*** Three 
C-c C-b b
*** 
C-c C-b | 0.5
C-c C-b i
*** Two 
C-c C-b b
*** Four 
C-c C-b b
#+end_example

** Four nice blocks - result

***                                                   :BMCOL:B_ignoreheading:
    :PROPERTIES:
    :BEAMER_col: 0.5
    :BEAMER_env: ignoreheading
    :END:
*** One                                                             :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:
*** Three                                                           :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:
***                                                    :BMCOL:B_ignoreheading:
    :PROPERTIES:
    :BEAMER_col: 0.5
    :BEAMER_env: ignoreheading
    :END:
*** Two                                                             :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:
*** Four                                                            :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:

** Top-aligned blocks

*** Code                                                      :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.5
    :BEAMER_envargs: C[t]
    :END:
: *** Code                                                      :B_block:BMCOL:
:     :PROPERTIES:
:     :BEAMER_env: block
:     :BEAMER_col: 0.5
:     :BEAMER_envargs: C[t]
:     :END:
: 
: *** Result                                                    :B_block:BMCOL:
:     :PROPERTIES:
:     :BEAMER_env: block
:     :BEAMER_col: 0.5
:     :END:
: pretty nice!
*** Result                                                    :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.5
    :END:
pretty nice!

** Two columns with text underneath - code

***                                                               :B_columns:
    :PROPERTIES:
    :BEAMER_env: columns
    :END:
**** Code                                                     :BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.6
    :END:

\tiny

: ***  :B_columns:
:     :PROPERTIES:
:     :BEAMER_env: columns
:     :END:
: 
: **** Code :BMCOL:
:     :PROPERTIES:
:     :BEAMER_col: 0.6
:     :END:
: 
: **** Result :BMCOL:
:     :PROPERTIES:
:     :BEAMER_col: 0.4
:     :END:
: 
: *** Underneath :B_ignoreheading:
:     :PROPERTIES:
:     :BEAMER_env: ignoreheading
:     :END:
: Much text underneath! Very Much.
: Maybe too much. The whole width!

\normalsize

**** Result                                                   :BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.4
    :END:

*** Underneath                                              :B_ignoreheading:
    :PROPERTIES:
    :BEAMER_env: ignoreheading
    :END:

Much text underneath! Very Much.
Maybe too much. The whole width!

** Nice quotes

*** Code                                                      :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.5
    :BEAMER_envargs: C[t]
    :END:
: #+begin_quote
: Emacs org-mode is a 
: great presentation tool - 
: Fast to beautiful slides.
: - Arne Babenhauserheide
: #+end_quote
*** Result                                                    :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.5
    :END:

#+begin_quote
Emacs org-mode is a 
great presentation tool - 
Fast to beautiful slides.
- Arne Babenhauserheide
#+end_quote

** Math snippet
*** Code                                                      :BMCOL:B_block:
    :PROPERTIES:
    :BEAMER_col: 0.5
    :BEAMER_env: block
    :BEAMER_envargs: C[t]
    :END:

*** Inline                                                          :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:
#+begin_example
\( 1 + 2 = 3 \) is clear
#+end_example

*** As equation                                                     :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:

#+begin_example
\[ 1 + 2 \cdot 3 = 7 \]
#+end_example

*** Result                                                    :BMCOL:B_block:
    :PROPERTIES:
    :BEAMER_col: 0.5
    :BEAMER_env: block
    :END:

*** Inline                                                          :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:

\( 1 + 2 = 3 \) is clear

*** As equation                                                     :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:

\[ 1 + 2 \cdot 3 = 7 \]

** \( \LaTeX \)

*** Code                                                      :BMCOL:B_block:
    :PROPERTIES:
    :BEAMER_col: 0.5
    :BEAMER_env: block
    :BEAMER_envargs: C[t]
    :END:

#+begin_example
\( \LaTeX \) gives a space 
after math mode.

\LaTeX{} does it, too.

\LaTeX does not.

At the end of a sentence 
both work.
Try \LaTeX. Or try \LaTeX{}.

Only \( \LaTeX \) and \( \LaTeX{} \) 
also work with HTML export.
#+end_example

*** Result                                                    :BMCOL:B_block:
    :PROPERTIES:
    :BEAMER_col: 0.5
    :BEAMER_env: block
    :END:

\( \LaTeX \) gives a space 
after math mode.

\LaTeX{} does it, too.

\LaTeX does not.

At the end of a sentence 
both work.
Try \LaTeX. Or try \LaTeX{}.

Only \( \LaTeX \) and \( \LaTeX{} \) 
also work with HTML export.

** Images with caption and label
***                                                               :B_columns:
    :PROPERTIES:
    :BEAMER_env: columns
    :BEAMER_envargs: [t]
    :END:
**** Code                                                     :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.6
    :END:

: #+caption: GNU Emacs icon
: #+label: fig:emacs-icon
: [[/usr/share/icons/hicolor/128x128/apps/emacs.png]]
: 
: This is image (\ref{fig:emacs-icon})

**** Result                                                   :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.4
    :END:

#+caption: GNU Emacs icon
#+label: fig:emacs-icon
[[/usr/share/icons/hicolor/128x128/apps/emacs.png]]

This is image (\ref{fig:emacs-icon})

***                                                         :B_ignoreheading:
    :PROPERTIES:
    :BEAMER_env: ignoreheading
    :END:

Autoscaled to the block width!

** Examples

*** Code                                                      :BMCOL:B_block:
    :PROPERTIES:
    :BEAMER_col: 0.5
    :BEAMER_env: block
    :BEAMER_envargs: C[t]
    :END:

#+begin_example
: #+bla: foo
: * Example Header
#+end_example

Gives an example, which does not interfere with regular org-mode parsing.

: #+begin_example
: content
: #+end_example

Gives a simpler multiline example which /can/ interfere.

*** Result                                                    :BMCOL:B_block:
    :PROPERTIES:
    :BEAMER_col: 0.5
    :BEAMER_env: block
    :END:

: #+bla: foo
: * Example Header

Gives an example, which does not interfere with regular org-mode parsing.

#+begin_example
content
#+end_example

Gives a simpler multiline example which /can/ interfere.

* Basic Configuration
** Header
: <Title>
: 
: #+startup: beamer
: #+LaTeX_CLASS: beamer
: #+LaTeX_CLASS_OPTIONS: [bigger]
: #+AUTHOR: <empty for none, if missing: inferred>
: #+DATE: <empty for none, if missing: today>
: #+BEAMER_FRAME_LEVEL: 2
: #+TITLE: <causes <Title> to be regular content!>

** .emacs config 
Put these lines into your .emacs or in a file your .emacs pulls in - i.e. via /(require 'mysettings)/ if the other file is named /mysettings.el/ and ends in /(provide 'mysettings)/.
#+begin_src emacs-lisp
(org-babel-do-load-languages ; babel, for executing 
 'org-babel-load-languages   ; code in org-mode.
 '((sh . t)
   (emacs-lisp . t)))

(require 'org-latex) ; latex export 
(add-to-list         ; with highlighting
  'org-export-latex-packages-alist '("" "minted"))
(add-to-list 
  'org-export-latex-packages-alist '("" "color"))
(setq org-export-latex-listings 'minted)
#+end_src

** .emacs variables
You can easily set these via /M-x customize-variable/.
#+begin_src emacs-lisp
(custom-set-variables ; in ~/.emacs, only one instance 
 '(org-export-latex-classes (quote ; in the init file!
    (("beamer" "\\documentclass{beamer}" 
        org-beamer-sectioning))))
 '(org-latex-to-pdf-process (quote 
    ((concat "pdflatex -interaction nonstopmode" 
             "-shell-escape -output-directory %o %f") 
     "bibtex $(basename %b)" 
     (concat "pdflatex -interaction nonstopmode" 
             "-shell-escape -output-directory %o %f")
     (concat "pdflatex -interaction nonstopmode" 
             "-shell-escape -output-directory %o %f")))))
#+end_src

/(concat "…" "…") is used here to get nice, short lines. Use the concatenated string instead ("pdflatex…%f")./

** Required programs

*** Emacs - ([[http://gnu.org/software/emacs][gnu.org/software/emacs]])
/To get org-mode and edit .org files effortlessly./
#+begin_src sh
emerge emacs
#+end_src
*** Beamer \( \LaTeX \) - ([[https://bitbucket.org/rivanvx/beamer][bitbucket.org/rivanvx/beamer]])
/To create the presentation./
#+begin_src sh
emerge dev-tex/latex-beamer app-text/texlive
#+end_src
*** Pygments - ([[http://pygments.org][pygments.org]])
/To color the source code (with minted)./
#+begin_src sh
emerge dev-python/pygments
#+end_src

* Thanks and license
** Thanks
Thanks go to the writers of emacs and org-mode, and for this guide in particular to the authors of the [[http://orgmode.org/worg/org-tutorials/org-beamer/tutorial.html][org-beamer tutorial on worg]].

Thank you for your great work!

This presentation is licensed under the [[http://gnu.org/licenses/gpl.html][GPL]] (v3 or later) with the additional permission to distribute it without the sources and the copy of the GPL if you give a link to those.[fn:perm]

[fn:perm]: \tiny As additional permission under GNU GPL version 3 section 7, you may distribute these works without the copy of the GNU GPL normally required by section 4, provided you include a license notice and a URL through which recipients can access the Corresponding Source and the copy of the GNU GPL.\normalsize
