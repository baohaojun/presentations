#+Latex: \AtBeginDvi{\special{pdf:tounicode UTF8-UCS2}}
#+Latex: \begin{CJK*}{UTF8}{simsun}
#+Latex: \CJKtilde


#+TITLE:     Tools and Programming
#+AUTHOR:    Bao Haojun
#+EMAIL:     baohaojun@gmail.com
#+DATE:      2013-06-08
#+LATEX_CLASS_OPTIONS: [presentation,CJKbookmarks]
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:2 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:
#+LINK_HOME:

* Tools from UPE (Unix Programming Environment)


** 你好吗

我觉得这真是太有意思了
** 2, 3, 4, 5

*** The same script behave differently according to script name ($0)

Why? Because:

- it improves code reuse,
- reduce code duplication.

  Duplication means maintenance cost.

*** It's very similar to busybox

** It's a very nice pattern

*** The bridge design pattern?

- Bridge cygwin shell script and Windows .exe together.

* Make tools smart （让工具更智能）

** Smart requires memory (a.k.a., history/历史)

*** bash history

Please learn to use:

- Ctrl-r
- Ctrl-s
- Alt-.
- Alt-n
- Ctrl-j
- ... (bind -p)
*** cd history

*** re (Re-Exec)


It respects memory/history, but it also respects context (auto completion).

*** The best history tool: git

** Smart requires context-awareness (auto/programmed completion)

*** skeleton completion

- should allow completing by interesting (remembered, maybe not continuous)
  stems.

- It is supported by firefox address bar completion.

** Smart require potential/cooperation

*** Do one thing and do it well.

*** Why GUI is not enough

GUI is great for simple and stupid, but when you want to go beyond...
*** Work with CLI and GUI, seamlessly.

- of
- oc
- up
- clipboard/bash keys
- get-newest-file
- of-newest
- notification.

** Smart requires boundary (cooperation continued)

*** Inteface and boundary

- The Windows way and the Unix way

- Process and DLL.

  + simple to use/reuse
  + easy to debug
  + difficult to crash


* Some examples
** Source code reading

*** The preface of <<Linux Device Driver>>, 1st Edition.
#+begin_quote
... is the result of hours of patient grepping through the kernel sources ...
#+end_quote
*** Brad Fitzpatrick (<<Coders At Work>>)

#+begin_quote
... pipe find into less and try to understand the directory structure ...
#+end_quote

** Source Insight?

*** Is this shell or C?

#+begin_example
echo hello world
#+end_example

*** Want compile it as gcc?

#+begin_example
echo echo hello world > 1.c

gcc -D echo='int main() {printf("hello world?\n");}' \
    -D hello= \
    -D world=  1.c
#+end_example

*** What does it implicate?

- double languages
- Java
- source insight and alike can be insufficient
- use text handling tools like grep, perl, etc.

** Write code that writes code

*** When it is 3, make it a 4 (for).

*** When you can not make a 4 in C, make one in Bash (@Bao Haojun)

#+begin_example
cd ~/system-config/
beagrep -e 'start code-generator'
#+end_example

*** Don't be afraid to give variable long names

- You can type long names easily
- You can change it easily when it's long
  - Why C++ author replace ~(int) i~ as ~dynamic_cast<int> i~?

    It's so long, and so ugly!

** beagrep
*** Grep 2G source code in 2 seconds.
*** Why does it work?
    - Because regexp is simple; you grep by full words. No ~r.*e.*a.*d.*l.*i.*n.*k~
*** Why is it so fast?
    - Because you grep *interesting* words.
      - Do not grep ~include~ in C.
      - Do not grep ~import~ in Java.
      - If you do, there should be other *interesting* words.

** grep-gtags

- When there are multiple matches.

  #+begin_quote
  In system/core/init, grep for ~service_start~
  #+end_quote

  Should respect context.

- Can source insight do that?
** Offline Wikipedia

- Don't let the GFW stop you!

- [[http://localhost:8000/en/article/Unix_philosophy/&redlink=1][Unix Philosophy]]
** American Heritage Dictionary
- Write your own dictionary. Do regexp tricks with it!

- It's helpful for learning English, which is important for programming.
* Fork my tools

** It's all on github

#+begin_example
cd ~
git clone --recursive \
    git://github.com/baohaojun/system-config.git
~/system-config/bin/after-co-ln-s.sh
~/system-config/bin/Linux/after-check-out.sh
#+end_example

or, to save network bandwidth:

#+begin_example
# get the tarball into your ~ from
# '\\bible\Public\user\baohaojun\system-config.tgz'

cd ~
tar zxfv system-config.tgz
~/system-config/bin/after-co-ln-s.sh
~/system-config/bin/Linux/after-check-out.sh
#+end_example

** Very Strange

Put these lines into your .emacs or in a file your .emacs pulls in - i.e. via /(require 'mysettings)/ if the other file is named /mysettings.el/ and ends in /(provide 'mysettings)/.
#+begin_src emacs-lisp
(org-babel-do-load-languages ; babel, for executing
 'org-babel-load-languages   ; code in org-mode.
 '((sh . t)
   (emacs-lisp . t)))

(require 'org-latex) ; latex export
(add-to-list         ; with highlighting
  'org-export-latex-packages-alist '("" "minted"))
(add-to-list
  'org-export-latex-packages-alist '("" "color"))
(setq org-export-latex-listings 'minted)
#+end_src

** xx
**** Result                                                   :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.4
    :END:

#+caption: GNU Emacs icon
#+label: fig:emacs-icon
[[~/system-config/doc/presentations/emacs.png]]

This is image (\ref{fig:emacs-icon})

#+Latex: \end{CJK*}

# Local Variables: #
# eval: (org-beamer-mode) #
# eval: (mmm-mode 1) #
# End: #
